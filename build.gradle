def DEVELOPMENT_ENVIRONMENT = 'dev'
def PRODUCTION_ENVIRONMENT = 'pro'

// プロジェクトプロパティの初期化を行う。
if (!project.hasProperty('env')) {
    ext.env = DEVELOPMENT_ENVIRONMENT
}

buildscript {
    ext {
        springBootVersion = '2.0.5.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.15"
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'net.ltgt.apt'

group = 'garaku.anigiri'
version = '1.0.1'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('javax.xml.bind:jaxb-api:2.3.0')
    implementation('org.javassist:javassist:3.23.1-GA')
    compileOnly('org.projectlombok:lombok')
    runtimeOnly('mysql:mysql-connector-java')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    apt "org.projectlombok:lombok:1.18.2"
}

bootJar {
    launchScript()
}

bootRun {
    if (env == DEVELOPMENT_ENVIRONMENT) {
        jvmArgs = ['-Dspring.profiles.active=development']
    }
    if (env == PRODUCTION_ENVIRONMENT) {
        jvmArgs = ['-Dspring.profiles.active=production']
    }
}

task npmRunBuild {
    doLast {
        def npm = System.getProperty('os.name').contains('Windows') ? 'cmd /c npm' : 'npm'
        if (file('./node_modules').exists() == false) {
            "${npm} install".execute().waitForProcessOutput(System.out, System.err)
        }
        if (env == DEVELOPMENT_ENVIRONMENT) {
            "${npm} run build".execute().waitForProcessOutput(System.out, System.err)
        }
        if (env == PRODUCTION_ENVIRONMENT) {
            "${npm} run build:pro".execute().waitForProcessOutput(System.out, System.err)
        }
    }
}

processResources.dependsOn npmRunBuild
